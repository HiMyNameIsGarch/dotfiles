#!/bin/sh
#
# Copy to USB (cptusb)
# This script ensures the user that the size of the file/files that he is gonna 
# copy over his USB will fit in
#

terminate() { printf "cptusb: %s\n" "$1" && exit 1 ; }

[ $# -lt "2" ] && terminate "Not enough parameters" 

files="$*"
MPoint="${files##* }"

# check if the mount point exists and if it is mounted
[ ! -d "$MPoint" ] && terminate "$MPoint does not exists".
[ -z "$(lsblk | grep "$MPoint")" ] &&
    terminate "$MPoint is not mounted! Try again!"

files="${files% *}" # remove last argument(mount point)
fileStatus=$(file $files)
test "${fileStatus#*"No such file"}" != "$fileStatus" && 
    terminate "$(printf "%s" "$fileStatus" | grep "No such file")"

# take the spaces from usb and files
usbFree=$(df | grep $MPoint | awk '{ print $4 }')
fileSize=$(du -sc $files | grep total | awk '{ print $1} ')

convertB() { printf "%s" "$1" | awk '{print $1/1024/1024 " GB "}' ; }

# if the files are bigger than usb free space, print message
[ "$fileSize" -gt "$usbFree" ] && 
    terminate "The file that you wanna transfer is too big for the usb
File: $(convertB "$fileSize") 
Usb: $(convertB "$usbFree")"

notify() { sudo -u himynameisgarch DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send --urgency="$1" "$2" "$3" ; }

# g flag is for graphical output (you can remove it if you don't have that option)
cp -gr $files $MPoint && 
    notify normal "Doom Guy says:" "Your files has been copied succesfully\nYou can unmount your usb now" && exit 1
notify critical "Doom Guy says:" "Your files couldn't be copied"

