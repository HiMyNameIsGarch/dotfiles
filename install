#!/bin/sh

# Usefull functions for the install
surround() {
    COLOR="$2"
    case $COLOR in 
        error | err) COLOR="\033[0;31m" ;;
        success | succ) COLOR="\033[0;32m" ;;
        warning | warn) COLOR="\033[0;33m" ;;
    esac
    # Prepare lengths for the surround characters
    TEXT_LENGTH="${#1}"
    WIDE_CHARS="$(( TEXT_LENGTH + 10 ))" # Tabs ( 2 * 4 ) + Margins ( 2 * 1 )
    # Build the front and bottom lines
    i=0
    BAR=""
    while [ "$i" -ne  "$WIDE_CHARS" ]; do
        i="$(( i + 1 ))"
        BAR="$BAR="
    done
    # Display the text surrounded
    printf "%s\n" "$BAR"
    printf "|$COLOR%s\033[0m|\n" "    $1    "
    printf "%s\n" "$BAR"
}

create_backup() {
    [ -d "$HOME/.$1" ] && sudo mkdir -p /etc/backup/"$1" && 
        sudo mv "$HOME/.$1/" "/etc/backup/$1"
}

error() { surround "$1" "error" ; exit 1 ; }

# Presentation prompt
surround "Install Garch's system configuration and programs." "warn"
surround "It's recommended to run this script on a base install of Arch based distro!" "warn"
surround "If you find any bugs please make an issue". "warn"
surround "TIP: To download programs faster, please enable parallel downloads" "warn"
printf '\n\n%s' "Continue installation? (y/n): "
read -r RESPONSE

case $RESPONSE in 
    [yY]* ) printf '\n' ;;
    *) exit 1 ;;
esac

# Main functions
install_programs() {
    surround "Syncing the repos"
    sudo pacman --noconfirm -Sy || error "Cannot syncing the repos"
    surround "Installing necessary packages"
    sudo cat pkgs.txt | sudo pacman --needed -S - || error "Cannot install packages"
    surround "Programs installed succesfully" "success"
}

compile_programs() {
    surround "Clonning dwm repo"
    DWMPATH="$HOME/Dev/dwm"
    # Make sure dwm folder does not exists
    [ -d "$DWMPATH" ] && sudo rm -r "$DWMPATH"
    mkdir -p "$DWMPATH"
    git clone "https://github.com/HiMyNameIsGarch/dwm" "$DWMPATH" || 
        error "Cannot clone dwm's repo"

    # Compiling dwm
    cd "$DWMPATH" || error "Cannot change directory to dwm"
    surround "Compiling dwm"
    sudo make clean install || error "Cannot compile dwm"

    # Compiling dwmblocks
    cd "$DWMPATH/dwmblocks" || error "Cannot change directory to dwmblocks"
    surround "Compiling dwmblocks"
    sudo make clean install || error "Cannot compile dwmblocks"

    # Compiling dmenu
    cd "$DWMPATH/dmenu" || error "Cannot change directory to dmenu"
    surround "Compiling dmenu"
    sudo make clean install || "Cannot compile dmenu"

    # Compile yay
    surround "All the programs compiled succesfully" "success"
}

install_configs() {
    # TODO
    # Compile yay
    surround "Beginning config installation"
    [ "$(basename "$PWD")" != "dotfiles" ] && error "Not in dotfiles directory, abording"
    
    # Create backup folder
    [ -d "/etc/backup" ] && sudo rm -r /etc/backup ; sudo mkdir -p /etc/backup

    # Backup current configs
    surround "Backup config folder" ; create_backup "config"
    surround "Backup vim folder" ; create_backup "vim"
    surround "Backup local folder" ; create_backup "local"

    # Create the same folder structrure
    surround "Recreating the folder structure"
    find . -type d | sed -r '/.*(\.git).*|^\.$/d; s/\.\///g' | 
        xargs -t -I {} mkdir -p ~/{} || error "Cannot create the same folder structure."

    # Symlink the current config files
    surround "Copy the configuration files"
    find . -type f | sed -r '/.*\.git.*|.*\.\/(README|LICENSE|install).*/d; s/\.\///g' | 
        xargs -t -I {} ln -s "$PWD"/{} ~/{} || error "Cannot copy the configuation files"

    # Display nice message
    surround "Success creating the configuration files." "success"
}

# Make some additional changes to the system to work properly
make_configs() {
    surround "Change zsh to default shell"
    sudo usermod --shell /usr/bin/zsh "$USER" || error "Cannot change default shell"
    surround "Source the profile file in .xprofile file"
    # Final step
}

# Ask the user for a reboot in order the changes to take effect
reboot_time() {
    surround "Success, your system is ready to rock" "success"
    surround "But you need to reboot in order the changes to take effect" "success"
    surround "It will be the last reboot you need to do!" "success"
    printf '\n%s' "Reboot? (y/n): "
    read -r RES
    case $RES in
        [yY]* ) echo "Wise move!" ; echo reboot ;;
        *) echo "To bad man..." && exit 1 ;;
    esac
}

# Call all the functions to begin the installation
install_programs || error "Error installing programs!"
compile_programs || error "Error while compilling programs!"
install_configs || error "Error installing configuration files."
make_configs || error "Cannot make modification to system"
# Ask for reboot for changes to take effect
reboot_time || error "Cannot reboot"
