#!/bin/sh

# Usefull functions for the install
surround() {
    COLOR="$2"
    case $COLOR in
        error | err) COLOR="\033[0;31m" ;;
        success | succ) COLOR="\033[0;32m" ;;
        warning | warn) COLOR="\033[0;33m" ;;
    esac
    # Prepare lengths for the surround characters
    TEXT_LENGTH="${#1}"
    WIDE_CHARS="$(( TEXT_LENGTH + 10 ))" # Tabs ( 2 * 4 ) + Margins ( 2 * 1 )
    # Build the front and bottom lines
    i=0
    BAR=""
    while [ "$i" -ne  "$WIDE_CHARS" ]; do
        i="$(( i + 1 ))"
        BAR="$BAR="
    done
    # Display the text surrounded
    printf "%s\n" "$BAR"
    printf "|$COLOR%s\033[0m|\n" "    $1    "
    printf "%s\n" "$BAR"
}

create_backup() {
    [ -d "$HOME/.$1" ] && sudo mkdir -p /etc/backup/"$1" &&
        sudo mv "$HOME/.$1/" "/etc/backup/$1"
}

error() { surround "$1" "error" ; exit 1 ; }

# Make sure this script isn't run as root
[ "$(id -u)" = "0" ] && error "Please do not run this script as root!"

# Presentation prompt
surround "Install Garch's system configuration and programs." "warn"
surround "It's recommended to run this script on a base install of Arch based distro!" "warn"
surround "If you find any bugs please make an issue". "warn"
surround "TIP: To download programs faster, please enable parallel downloads" "warn"
printf '\n\n%s' "Continue installation? (y/n): "
read -r RESPONSE

case $RESPONSE in
    [yY]* ) printf '\n' ;;
    *) exit 1 ;;
esac

CWD="$(pwd)"

home() {
    cd "$CWD" || error "Cannot go back one directory"
}

# Main functions
install_programs() {
    surround "Syncing the repos"
    sudo pacman --noconfirm -Sy || error "Cannot syncing the repos"
    surround "Installing necessary packages"
    sudo cat pkgs.txt | sudo pacman --noconfirm --needed -S - ||
        error "Cannot install packages"
    surround "Programs installed succesfully" "success"
}

compile_programs() {
    surround "Clonning dwm repository"
    DWMPATH="$HOME/Dev/dwm"
    # Make sure dwm folder does not exists
    [ -d "$DWMPATH" ] && sudo rm -r "$DWMPATH"
    mkdir -p "$DWMPATH"
    git clone "https://github.com/HiMyNameIsGarch/dwm" "$DWMPATH" ||
        error "Cannot clone dwm's repository"

    # Compiling dwm
    cd "$DWMPATH" || error "Cannot change directory to dwm"
    surround "Compiling dwm"
    sudo make clean install || error "Cannot compile dwm"

    # Compiling dwmblocks
    cd "$DWMPATH/dwmblocks" || error "Cannot change directory to dwmblocks"
    surround "Compiling dwmblocks"
    sudo make clean install || error "Cannot compile dwmblocks"

    # Compiling dmenu
    # cd "$DWMPATH/dmenu" || error "Cannot change directory to dmenu"
    # surround "Compiling dmenu"
    # sudo make clean install || "Cannot compile dmenu"
    # TODO: Create command for dmenu sep repo
    #
    # Compile paru
    surround "Clonning paru repository"
    PARUPATH="$HOME/Dev/paru"
    [ -d "$PARUPATH" ] && sudo rm -r "$PARUPATH"
    mkdir -p "$PARUPATH"
    git clone "https://aur.archlinux.org/paru.git" "$PARUPATH" ||
        error "Cannot clone paru's repository"

    # Compile paru
    cd "$PARUPATH" || error "Cannot change diretory to paru"
    surround "Compiling paru"
    makepkg -si || error "Cannot compile paru"

    home

    surround "Remove paru's directory"
    sudo rm -r "$PARUPATH" || surround "Cannot remove paru's directory" "warn"
    surround "Remove dwm's directory"
    sudo rm -r "$DWMPATH" || surround "Cannot remove dwm's directory" "warn"

    surround "All the programs compiled succesfully" "success"
}

install_configs() {
    surround "Beginning config installation"

    [ "$(basename "$PWD")" != "dotfiles" ] && error "Not in dotfiles directory, abording"

    # Create backup folder
    [ -d "/etc/backup" ] && sudo rm -r /etc/backup ; sudo mkdir -p /etc/backup

    # Backup current configs
    surround "Backup config folder" ; create_backup "config"
    surround "Backup vim folder" ; create_backup "vim"
    surround "Backup local folder" ; create_backup "local"

    # Create the same folder structrure
    surround "Recreating the folder structure"
    find . -type d | sed -r '/.*(\.git).*|^\.$/d; s/\.\///g' |
        xargs -t -I {} mkdir -p ~/{} || error "Cannot create the same folder structure."

    # Symlink the current config files
    surround "Copy the configuration files"
    find . -type f | sed -r '/.*\.git.*|.*\.\/(README|LICENSE|install|pkgs).*/d; s/\.\///g' |
        xargs -t -I {} ln -sf "$PWD"/{} ~/{} || error "Cannot copy the configuation files"

    surround "Success creating the configuration files." "success"
}

# Make some additional changes to the system to work properly
make_configs() {
    # Fonts
    surround "Installing fonts"
    git clone --depth 1 "https://github.com/ryanoasis/nerd-fonts.git" || error "Cannot clone nerd fonts repo"
    cd "nerd-fonts" || error "cannot change dir to nerd-fonts"
    ./install.sh "IBMPlexMono" || "Cannot install font IBM Plex Mono"
    ./install.sh "RobotoMono" || "Cannot install font IBM Plex Mono"
    ./install.sh "DejaVuSansMono" || "Cannot install font DejaVuSansMono"
    ./install.sh "AnonymousPro" || "Cannot install font AnonymousPro"
    ./install.sh "Hack" || "Cannot install font Hack"
    ./install.sh "JetBrainsMono" || "Cannot install font JetBrainsMono"
    ./install.sh "UbuntuMono" || "Cannot install font UbuntuMono"
    ./install.sh "SourceCodePro" || "Cannot install font SourceCodePro"

    home

    # Change default shell
    surround "Change default shell to zsh"
    sudo usermod --shell /usr/bin/zsh "$USER" || error "Cannot change default shell"

    # Many env variables are set in profile file, so we need to source it in xprofile
    surround "Sourcing the profile file in .xprofile file"
    PROFILE="$HOME/.xprofile"
    if [ ! -f "$PROFILE" ]; then
        touch "$PROFILE"
        chmod +x "$PROFILE"
        printf '%s\n\n' "#!/bin/sh" >> "$PROFILE"
    fi
    {
        echo "profile=\"/home/$USER/.config/profile\" "
        echo "[ -f \"\$profile\" ] && . \"\${profile}\""
    } >> "$PROFILE"

    surround "Starting Lightdm"
    sudo rc-update add lightdm default || error "Cannot enable lightdm at startup"

    # In order for dwm to work with lightdm you need to create manually an entry
    surround "Creating dwm entry for Lightdm"
    sudo mkdir -p "/usr/share/xsessions" || error "Cannot create folder for xsessions"
    DWMENTRY="/usr/share/xsessions/dwm.desktop"
    sudo touch "$DWMENTRY" || error "Cannot create desktop entry"
    echo "[Desktop Entry]" | sudo tee "$DWMENTRY" > /dev/null
    {
        echo "Encoding=UTF-8"
        echo "Name=dwm"
        echo "Comment=Dynamic window manager"
        echo "Exec=startdwm"
        echo "Icon=dwm"
        echo "Type=XSession"
    } | sudo tee -a "$DWMENTRY" > /dev/null ||
        error "Cannot create dwm desktop entry"

    # Create a script to start dwm - log the output in a file
    surround "Create dwm start script"
    # Create the folder logs for dwm
    mkdir -p "$HOME/.cache/dwm" || error "Cannot create dwm logs folder"
    DWMSCRIPT="/usr/local/bin/startdwm"
    # Put dwm in an infinite loop so when restarting you don't need to login again
    sudo touch "$DWMSCRIPT" || error "Cannot create dwm start script"
    printf '%s\n\n' "#!/bin/sh" | sudo tee "$DWMSCRIPT" > /dev/null
    {
        echo "while true; do"
        echo "    dwm >> /home/$USER/.cache/dwm/\$(date +%Y-%m-%d.log)"
        echo "done"
    } | sudo tee -a "$DWMSCRIPT" >/dev/null ||
        error "Cannot create dwm start script"
    sudo chmod +x "$DWMSCRIPT" || error "Cannot change permission to dwm script"

    surround "Success creating last changes for the system" "success"
}

add_themes() {
    surround "Adding additional themes for some programs"

    #surround "Add Lightdm Nody greeter"
    #git clone --recursive https://github.com/JezerM/nody-greeter.git || error "Cannot clone Nody repo"
    #cd nody-greeter || error "Cannot change directory into nody greeter"
    #npm install || error "Cannot install npm packages"
    ##npm run rebuild || error "Cannot install npm packages"
    #npm run build || error "Cannot install npm packages"
    #sudo node make install || error "Cannot install nody greeter"

    #surround "Changing lightdm config to support Nody greeter"
    #sudo sed -i 's/^greeter-session.*/greeter-session = nody-greeter/g' /etc/lightdm/lightdm.conf || error "Cannot apply setting to lightdm conf"

    #surround "Cleaning repo"
    #home
    #rm -r nody-greeter || error "Cannot remove nody-directory"

    surround "Installing grub theme"
    git clone https://github.com/nobreDaniel/dotfile.git || error "Cannot clone grub repo"
    sudo cp -r ./dotfile/Arcade /usr/share/grub/themes/ || error "Cannot copy theme into grub themes directory"
    sudo cp grub_config /etc/default/grub || error "Cannot copy the grub config file"
    sudo grub-mkconfig -o /boot/grub/grub.cfg || error "Cannot update grub"

    surround "Themes installed succesfully" "success"
}

# Ask the user to reboot in order the changes to take effect
reboot_time() {
    surround "One quick note for me, compile dmenu, it's not included in this script, thanks! "
    surround "Success, your system is ready to rock" "success"
    surround "But you need to reboot in order the changes to take effect" "success"
    surround "It will be the last reboot you need to do!" "success"
    printf '\n%s' "Reboot? (y/n): "
    read -r RES
    case $RES in
        [yY]* ) echo "Wise move!" ; sleep 3 ; sudo reboot ;;
        *) echo "To bad man..." && exit 1 ;;
    esac
}

# Call all the functions to begin the installation
install_programs || error "Error installing programs"
install_configs || error "Error installing configuration files"
compile_programs || error "Error while compilling programs"
make_configs || error "Cannot make modification to system"
add_themes || error "Error while installing system themes"
# Ask to reboot for changes to take effect
reboot_time || error "Cannot reboot"
